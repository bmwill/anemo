searchState.loadedDescShard("anemo", 0, "A builder for a <code>Network</code>.\nConfiguration for a <code>Network</code>.\nOrigin of how a Connection was established.\nDirection of a network event.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\n<code>Inbound</code> indicates that the remote side initiated the …\nA handle that keeps all the peers which we have registered …\nHandle to a network.\nWeak reference to a <code>Network</code> handle.\nContains the success value\n<code>Outbound</code> indicates that we initiated the network event.\nHandle to a connection with a remote Peer.\nConfiguration for the underlying QUIC transport.\n<code>Result&lt;T, Error&gt;</code>\nThe router type for composing handlers and services.\nIf true, failure to set UDP socket buffer sizes as …\n<code>alternate-server-name</code> helps with network name migration. …\nGet the backtrace for this Error.\nBinds to the provided address, and returns a <code>Builder</code>.\nAn iterator of the chain of source errors contained by …\nSet the <code>Config</code> that this network should use.\nSet a timeout, in milliseconds, for all inbound and …\nThe backoff step size, in milliseconds, used to calculate …\nSize of the internal <code>ConnectionManager</code>s mailbox.\nTrigger connectivity checks every interval.\nWrap the error value with additional context.\nMaximum quantity of out-of-order crypto layer data to …\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an error object from a type-erased standard …\nSet a timeout, in milliseconds, for all inbound requests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nReturns true if the network has been shutdown.\nInterval at which to send keep-alives to maintain …\nReturn the local address that this Network is listening on.\nMaximum number of incoming bidirectional streams that may …\nMaximum number of concurrent connections to have …\nMaximum number of concurrent connections to attempt to …\nMaximum number of incoming unidirectional streams that may …\nMaximum delay between 2 consecutive attempts to connect …\nSet the maximum frame size in bytes.\nHow long to wait to hear from a peer before timing out a …\nMerge two routers into one.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nProvide an optional <code>Layer</code> that will be used to wrap all …\nSet a timeout, in milliseconds, for all outbound requests.\nSize of the broadcast channel use for subscribing to …\nReturn the <code>PeerId</code> of this Network.\nSet the Ed25519 Private Key that will be used to perform …\nConfiguration for the underlying QUIC transport.\nMaximum number of bytes a peer may transmit across all …\nThe lowest level cause of this error — this error’s …\nApply a <code>tower::Layer</code> to the router that will only run if …\nMaximum number of bytes to transmit to a peer without …\nSet the <code>server-name</code> that will be used when constructing a …\nShutdown the Network.\nSet a timeout, in milliseconds, until the peers are …\nReturns the size of the network’s UDP socket receive …\nSize of the receive buffer on the UDP socket (<code>SO_RCVBUF</code>).\nReturns the size of the network’s UDP socket send buffer.\nSize of the send buffer on the UDP socket (<code>SO_SNDBUF</code>).\nStart a <code>Network</code> and return a handle to it.\nMaximum number of bytes a peer may transmit without …\nAttempts to upgrade this weak reference to a <code>Network</code> …\nMiddleware that clones a value into each request’s …\nMiddleware for adding some shareable value to request …\n<code>Layer</code> for adding some shareable value to request extensions…\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying service.\nGets a reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a <code>AddExtension</code>…\nCreate a new <code>AddExtensionLayer</code>.\nCreate a new <code>AddExtension</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Status</code> with the associated code and message.\nReturns the argument unchanged.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nSend a single unary RPC request.\nA <code>Codec</code> that implements <code>bincode</code> encoding/decoding via the …\nTrait that knows how to encode and decode RPC messages.\nThe decodable message.\nDecodes RPC message types\nThe encoder that can decode a message.\nThe encodable message.\nEncodes RPC message types\nThe encoder that can encode a message.\nThe type of encoding errors.\nThe type of unrecoverable frame decoding errors.\nA <code>Codec</code> that does nothing.\nThe type that is encoded.\nThe type that is decoded.\nA <code>Codec</code> that implements <code>json</code> encoding/decoding via the …\nDecode a message from the buffer.\nFetch the decoder.\nEncodes a message into the provided buffer.\nFetch the encoder.\nReturn the format name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResponse future\nResponse message type\nA specialization of tower_service::Service.\nCall the service\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHandle a single unary RPC request.\nRepresentation of a network address that is dial-able in …\nA string representation of a SocketAddr or a string like …\nNot proactively attempt to estlish a connection but always …\nOrigin of how a Connection was established.\nDirection of a network event.\nA type map of protocol extensions.\nAlways attempt to maintain a connection with this Peer.\nHost and Port where ‘host’ should be either a string …\n<code>Inbound</code> indicates that the remote side initiated the …\nNever attempt to maintain a connection with this Peer. …\n<code>Outbound</code> indicates that we initiated the network event.\nA plain SocketAddr\nClear the <code>Extensions</code> of all inserted extensions.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the extension set is empty or not.\nGet the number of extensions available.\nCreate an empty <code>Extensions</code>.\nRemove a type from this <code>Extensions</code>.\nTimeout in nanoseconds, encoded as an u64\nThe request’s extensions\nReturns the argument unchanged.\nThe request’s headers\nCalls <code>U::from(self)</code>.\nWrap the input message <code>T</code> in a <code>Request</code>\nSet the max duration the request is allowed to take.\nReturns the previously-set timeout on this Request, or …\nThe request’s version\nSet the max duration the request is allowed to take.\nThe request’s extensions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a response.\nCheck if status is within 400-499.\nCheck if status is within 500-599.\nCheck if status is within 200-299.\nThe response’s version")