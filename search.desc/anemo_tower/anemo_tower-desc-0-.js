searchState.loadedDescShard("anemo_tower", 0, "The latency unit used to report latencies by middleware.\nUse microseconds.\nUse milliseconds.\nUse nanoseconds.\nUse seconds.\nReturns the argument unchanged.\nMiddleware that adds a per-peer inflight limit to inbound …\nCalls <code>U::from(self)</code>.\nMiddleware that adds a per-peer rate limit to inbound …\nSet and propagate request ids.\nMiddleware for setting headers on requests and responses.\nMiddleware that adds high level tracing to a <code>Service</code>.\nTrait for authorizing requests.\nMiddleware that adds authorization to a <code>Service</code>.\n<code>Layer</code> that adds authorization to a <code>Service</code>.\nResponse future for <code>RequireAuthorization</code>.\nAuthorize the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a …\nCreate a new <code>RequireAuthorizationLayer</code> using the given …\nCreate a new <code>RequireAuthorization</code>.\nMiddleware that adds callbacks to a <code>Service</code>.\n<code>Layer</code> that adds callbacks to a <code>Service</code>.\nResponse future for <code>Callback</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a …\nCreate a new <code>CallbackLayer</code> using the given …\nCreate a new <code>Callback</code>.\nTrait for classifying responses as either success or …\nA response was classified as an error with the …\nThe type returned when a response is classified as a …\nA response was classified as a failure with the …\nClassifier that considers responses with a status code …\nThe failure class for <code>StatusInRangeAsFailures</code>.\nClassify an error.\nClassify a response.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>StatusInRangeAsFailures</code> that classifies …\nCreates a new <code>StatusInRangeAsFailures</code> that classifies …\nBlocks request until it can be serviced.\nMiddleware for adding a per-peer inflight limit to inbound …\n<code>Layer</code> for adding a per-peer inflight limit to inbound …\nReturns an error indicating the minimum wait time required …\nWhat to do if inflight limit is exceeded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying service.\nGets a reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a …\nCreate a new <code>InflightLimitLayer</code>.\nCreate a new <code>InflightLimit</code>.\nBlocks request until it can be serviced.\nMiddleware for adding a per-peer rate limit to inbound …\n<code>Layer</code> for adding a per-peer rate limit to inbound requests.\nReturns an error indicating the minimum wait time required …\nKey for error response header indicating the minimum wait …\nWhat to do if rate limit is exceeded.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying service.\nGets a reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a <code>RateLimit</code> …\nCreates a new <code>RateLimitLayer</code>.\nCreates a new <code>RateLimit</code>. If the quota is exceeded, …\nTrait for producing <code>RequestId</code>s.\nA <code>MakeRequestId</code> that generates <code>UUID</code>s.\nPropagate request ids from requests to responses.\nPropagate request ids from requests to responses.\nResponse future for <code>PropagateRequestId</code>.\nAn identifier for a request.\nSet request id headers and extensions on requests.\nSet request id headers and extensions on requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the underlying header value.\nGets a reference to the underlying service.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying header value.\nConsumes <code>self</code>, returning the underlying service.\nConsumes <code>self</code>, returning the underlying service.\nReturns a new <code>Layer</code> that wraps services with a <code>SetRequestId</code>…\nReturns a new <code>Layer</code> that wraps services with a …\nTry and produce a <code>RequestId</code> from the request.\nCreate a new <code>RequestId</code> from a header value.\nCreate a new <code>SetRequestIdLayer</code>.\nCreate a new <code>SetRequestId</code>.\nCreate a new <code>PropagateRequestIdLayer</code>.\nCreate a new <code>PropagateRequestId</code>.\nCreate a new <code>SetRequestIdLayer</code> that uses <code>request-id</code> as the …\nCreate a new <code>SetRequestId</code> that uses <code>request-id</code> as the …\nCreate a new <code>PropagateRequestIdLayer</code> that uses <code>request-id</code> …\nCreate a new <code>PropagateRequestId</code> that uses <code>request-id</code> as …\nTrait for producing header values.\nMiddleware that sets a header on the request.\nLayer that applies <code>SetRequestHeader</code> which adds a request …\nMiddleware that sets a header on the response.\nLayer that applies <code>SetResponseHeader</code> which adds a response …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to create a header value from the request or response.\nSet a header on the request.\nSet a header on the response.\nMiddleware that sets a header on the request.\nLayer that applies <code>SetRequestHeader</code> which adds a request …\nCreate a new <code>SetRequestHeaderLayer</code>.\nCreate a new <code>SetRequestHeader</code>.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nConsumes <code>self</code>, returning the underlying service.\nCreate a new <code>SetRequestHeaderLayer</code>.\nCreate a new <code>SetRequestHeader</code>.\nResponse future for <code>SetResponseHeader</code>.\nMiddleware that sets a header on the response.\nLayer that applies <code>SetResponseHeader</code> which adds a response …\nReturns the argument unchanged.\nCreate a new <code>SetResponseHeaderLayer</code>.\nCreate a new <code>SetResponseHeader</code>.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nCreate a new <code>SetResponseHeaderLayer</code>.\nCreate a new <code>SetResponseHeader</code>.\nThe default way <code>Span</code>s will be created for <code>Trace</code>.\nThe default <code>OnFailure</code> implementation used by <code>Trace</code>.\nThe default <code>OnRequest</code> implementation used by <code>Trace</code>.\nThe default <code>OnResponse</code> implementation used by <code>Trace</code>.\nTrait used to generate <code>Span</code>s from requests. <code>Trace</code> wraps …\nTrait used to tell <code>Trace</code> what to do when a request fails.\nTrait used to tell <code>Trace</code> what to do when a request is …\nTrait used to tell <code>Trace</code> what to do when a response has …\nResponse future for <code>Trace</code>.\nMiddleware that adds high level tracing to a <code>Service</code>.\n<code>Layer</code> that adds high level tracing to a <code>Service</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude request headers on the <code>Span</code>.\nInclude response headers on the <code>Event</code>.\nGets a reference to the underlying service.\nGets a mutable reference to the underlying service.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying service.\nSet the <code>LatencyUnit</code> latencies will be reported in.\nSet the <code>LatencyUnit</code> latencies will be reported in.\nReturns a new <code>Layer</code> that wraps services with a <code>TraceLayer</code> …\nSet the <code>Level</code> used for the tracing span.\nSet the <code>Level</code> used for tracing events.\nSet the <code>Level</code> used for tracing events.\nSet the <code>Level</code> used for tracing events.\nMake a span from a request.\nCustomize how to make <code>Span</code>s that all request handling will …\nCustomize how to make <code>Span</code>s that all request handling will …\nCreate a new <code>TraceLayer</code> using the given <code>Classifier</code>.\nCreate a new <code>DefaultMakeSpan</code>.\nCreate a new <code>DefaultOnFailure</code>.\nCreate a new <code>DefaultOnRequest</code>.\nCreate a new <code>DefaultOnResponse</code>.\nCreate a new <code>Trace</code>.\nCreate a new <code>TraceLayer</code> using <code>StatusInRangeAsFailures</code> …\nCreate a new <code>TraceLayer</code> using <code>StatusInRangeAsFailures</code> …\nDo the thing.\nCustomize what to do when a response has been classified …\nCustomize what to do when a response has been classified …\nDo the thing.\nCustomize what to do when a request is received.\nCustomize what to do when a request is received.\nDo the thing.\nCustomize what to do when a response has been produced.\nCustomize what to do when a response has been produced.")